FROM nvidia/cuda:9.0-devel-ubuntu16.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ENV CUDNN_VERSION=7.4.1.5-1+cuda9.0
ENV NCCL_VERSION=2.4.2-1+cuda9.0


#################################################
#     Python 3.6 installations for dev          #
#################################################

RUN apt-get update && apt-get install -y software-properties-common curl wget pv && \
    add-apt-repository ppa:jonathonf/python-3.6 && \
    apt-get update && apt-get install -y --no-install-recommends \
    python3.6 \
    python3.6-dev \
    python3.6-venv \
    && \ 
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
	
RUN ln -s /usr/bin/python3.6 /usr/local/bin/python3 && \
    ln -s /usr/local/bin/pip /usr/local/bin/pip3 && \
    ln -s /usr/bin/python3.6 /usr/local/bin/python
    
RUN curl -fSsL -O ftp://jenkins-cloud/pub/Develop/get-pip.py && \
    python3.6 get-pip.py && \
    rm get-pip.py && \
    python --version 


# Python 3.6 Will be used as default version

ARG python=3.6
ENV PYTHON_VERSION=${python}


############################################	
#    Installing basic environment app's    #
############################################

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cmake \
        git \
        curl \
        vim \
        wget \
	pv \
        ca-certificates \
	libsm6 \
	libxext6 \
	libxrender-dev \
        libcudnn7=${CUDNN_VERSION} \
        libnccl2=${NCCL_VERSION} \
        libnccl-dev=${NCCL_VERSION} \
        libjpeg-dev \
        libpng-dev 
	
	
############################################	
#      Installing build environment app    #
############################################
	
RUN python -m pip --no-cache-dir install \
    opencv-python \
    numpy \
    sklearn \
    albumentations \
    easydict \
    texttable \
    tflearn \
    keras \
    h5py


##########################################
#       Install PyTorch & Dependences    #
##########################################

  RUN apt-get update && apt-get install -y --no-install-recommends \
      libgraphviz-dev 
        
  RUN python -m pip --no-cache-dir install \
      ipdb \
      imageio \
      graphviz \
      tensorboardX \
      qpth==0.0.13 
      
	  
  RUN git clone https://github.com/pygraphviz/pygraphviz.git && \
      cd pygraphviz && \
      python setup.py install --include-path=/usr/include/graphviz --library-path=/usr/lib/graphviz/ && \
      rm -rf pygraphviz
     	  
	  
  RUN curl -OSL ftp://jenkins-cloud/pub/Tflow-VNC-Soft/PyTorch/torch-1.0.1.post2-cp36-cp36m-manylinux1_x86_64.whl -o torch-1.0.1.post2-cp36-cp36m-manylinux1_x86_64.whl && \
      python -m pip --no-cache-dir install \
      torch-1.0.1.post2-cp36-cp36m-manylinux1_x86_64.whl \
      torchvision==0.2.2.post2 \
      torchnet && \
      apt-get clean && \ 
      rm -f torch-1.0.1.post2-cp36-cp36m-manylinux1_x86_64.whl
      

###################################
#        Install Open MPI.        #
###################################

RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
    tar zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi
    

#################################################	
# Install Horovod, temporarily using CUDA stubs #
#################################################
# 
RUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \
    cd /tmp && \
    git clone --recursive https://github.com/uber/horovod.git && \
    cd horovod && \
    python setup.py clean && \
    python setup.py bdist_wheel && \
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir dist/horovod*.whl && \
    ldconfig && \
    cd .. && \
    rm -rf horovod
    
 
#############################################################
# Install OpenSSH for MPI to communicate between containers #
#############################################################

RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
    mkdir -p /var/run/sshd
    
    
#######################################################################
# Allow OpenSSH to talk to containers without asking for confirmation #
#######################################################################

RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config
    
    
####################################
# Allow SSH login without password #
####################################    

RUN cd /root && \
    curl -OSL ftp://jenkins-cloud/pub/Tflow-VNC-Soft/Horovod/ssh-horovod.tar && \
    pv -f ssh-horovod.tar | tar xpf - -C $PWD && \
    rm -f ssh-horovod.tar
    
    
#####################
# Download examples #
#####################

RUN apt-get install -y --no-install-recommends subversion && \
    svn checkout https://github.com/horovod/horovod/trunk/examples && \
    rm -rf /examples/.svn && \
    apt-get -q clean -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -f /var/cache/apt/*.bin
    
    
#########################################
# Add Welcome Message With Instructions #
#########################################

RUN printf '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; printf "\
||||||||||||||||||||||||||||||||||||\n\
|                                  |\n\
| Docker Image Running Ubuntu 16   |\n\
| With PyTorch ver.1.0.1.post2 &   |\n\
| Build from The Sources Horovod   |\n\
|                                  |\n\
||||||||||||||||||||||||||||||||||||\n\
\n "\
        > /etc/motd

WORKDIR "/examples"
