FROM nvidia/cuda:9.0-devel-ubuntu16.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ENV TENSORFLOW_VERSION=1.12.0
ENV PYTORCH_VERSION=1.1.0
ENV TORCHVISION_VERSION=0.2.2.post3
ENV CUDNN_VERSION=7.4.1.5-1+cuda9.0
ENV NCCL_VERSION=2.3.7-1+cuda9.0


#################################################
#     Python 3.6 installations for dev          #
#################################################

RUN apt-get update && apt-get install -y software-properties-common curl wget pv && \
    add-apt-repository ppa:jonathonf/python-3.6 && \
    apt-get update && apt-get install -y --no-install-recommends \
    python3.6 \
    python3.6-dev \
    python3.6-venv \
    && \ 
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
	
RUN ln -s /usr/bin/python3.6 /usr/local/bin/python3 && \
    ln -s /usr/local/bin/pip /usr/local/bin/pip3 && \
    ln -s /usr/bin/python3.6 /usr/local/bin/python
    
RUN curl -fSsL -O ftp://jenkins-cloud/pub/Develop/get-pip.py && \
    python3.6 get-pip.py && \
    rm get-pip.py && \
    python --version 


# Python 3.6 Will be used as default version

ARG python=3.6
ENV PYTHON_VERSION=${python}

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cmake \
        git \
        curl \
        vim \
        wget \
        ca-certificates \
	libsm6 \
	libxext6 \
	libxrender-dev \
        libcudnn7=${CUDNN_VERSION} \
        libnccl2=${NCCL_VERSION} \
        libnccl-dev=${NCCL_VERSION} \
        libjpeg-dev \
        libpng-dev 
	
	
############################################	
#      Installing build environment app    #
############################################
	
RUN python -m pip --no-cache-dir install \
    opencv-python \
    sklearn \
    albumentations \
    easydict \
    texttable \
    tflearn \
    keras \
    h5py


# Install TensorFlow, Keras & PyTorch
RUN pip install tensorflow-gpu==${TENSORFLOW_VERSION} torch==${PYTORCH_VERSION} torchvision==${TORCHVISION_VERSION}

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
    tar zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi
    

# Install Horovod, temporarily using CUDA stubs
#RUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \
#    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod && \
#    ldconfig
    

# Install OpenSSH for MPI to communicate between containers
RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
    mkdir -p /var/run/sshd
    

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config
    
    
# Allow SSH login without password
RUN cd /root && \
    curl -OSL ftp://jenkins-cloud/pub/Tflow-VNC-Soft/Horovod/ssh-horovod.tar && \
    pv -f ssh-horovod.tar | tar xpf - -C $PWD && \
    rm -f ssh-horovod.tar
    

# Download examples
RUN apt-get install -y --no-install-recommends subversion && \
    svn checkout https://github.com/horovod/horovod/trunk/examples && \
    rm -rf /examples/.svn && \
    apt-get -q clean -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -f /var/cache/apt/*.bin

WORKDIR "/examples"
