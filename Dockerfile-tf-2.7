FROM yi/tflow-gui:latest
 
MAINTAINER Igor Rabkin <igor.rabkin@xiaoyi.com>


##################################################################
#                Pick up some TF dependencies                    #
##################################################################

RUN apt-get update && apt-get install -y --no-install-recommends \ 
    libfreetype6-dev \
    libpng12-dev \ 
    libzmq3-dev \
    libcurl3-dev \
    libgoogle-perftools-dev \		 
    pkg-config \ 
    python \ 
    python-dev 
    
    
##################################################################
#                     Possible TensorRT Support                  #
##################################################################

RUN apt-get update && \
    apt-get install nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0 && \
    apt-get update && \
    apt-get install libnvinfer4=4.1.2-1+cuda9.0 && \
    apt-get install libnvinfer-dev=4.1.2-1+cuda9.0
    # ENV TF_NEED_TENSORRT 1
          
#################################################
#     Python installations for dev              #
#################################################
	
RUN apt-get install -y --no-install-recommends \
    python-opencv \
    python-bs4 \
    python-tk \
    python-pandas \
    python-sklearn \
    python-urllib3 \
    python-xmltodict \
    python-elasticsearch \
    python-skimage-lib && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*

	
################################	
# Updating PIP and Dependences #
################################

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py	
 
RUN pip --no-cache-dir install \ 
    Pillow \
    toposort \
    networkx \
    pytest \
    ipykernel \
    jupyter \
    matplotlib \
    numpy==1.14.5 \
    pandas \
    scipy \
    sklearn \
    tensorlayer \
    scikit-learn \
    tqdm \
    tflearn \
    more_itertools \
    pymongo \
    sacred \
    tables \
    keras-applications==1.0.6 \
    keras-preprocessing==1.0.5 \
    && \
    python -m ipykernel.kernelspec 
    
    
################################################################## 
#              Installing XIAOYI Packages                        #
##################################################################

RUN python3.6 -m pip --no-cache-dir install --index-url http://192.168.1.102:8888 xiaoyi --trusted-host 192.168.1.102 --upgrade &&\
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
	
	
###################################
# Install TensorFlow GPU version. #
###################################

RUN cd /
ARG FTP_PATH
ARG FILE_NAME
RUN curl -OSL ${FTP_PATH} -o ${FILE_NAME} && \
    pip --no-cache-dir install --upgrade ${FILE_NAME} && \
    rm -f ${FILE_NAME}
    
    
#################################################
#     Install HDF5 with multithread support     #
#################################################

RUN curl -OSL https://support.hdfgroup.org/ftp/HDF5/current18/src/hdf5-1.8.20.tar && \
    tar -xvf hdf5-1.8.20.tar && \
    cd hdf5-1.8.20 && \
    ./configure --enable-threadsafe  --enable-unsupported --prefix /usr/local && \
    make && \
    make install && \
    cd .. && \
    rm hdf5-1.8.20.tar && rm -rf hdf5-1.8.20.tar && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
    
    ENV HDF5_DIR=/usr/local 
    RUN pip --no-cache-dir install --no-binary=h5py h5py
    
    
#################################################
#        Compale & Install Cmake Package        #
#################################################

RUN apt-get update && apt-get install -y --no-install-recommends \ 
    openssl \
    libssl-dev
 
ARG version=3.12 
ARG build=3 
RUN cd /usr/local/src && \
    wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz && \
    tar -xzvf cmake-$version.$build.tar.gz && \
    cd cmake-$version.$build && \
    sed -i 's/cmake_options="-DCMAKE_BOOTSTRAP=1"/cmake_options="-DCMAKE_BOOTSTRAP=1 -DCMAKE_USE_OPENSSL=ON"/' bootstrap && \
    ./bootstrap && \
    make -j8 && \
    make install && \
    cmake --version && \
    rm cmake-$version.$build.tar.gz && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
    
    
##################################################
# Configure the build for our CUDA configuration #
##################################################

ENV CI_BUILD_PYTHON python
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1
ENV TF_CUDA_VERSION=9.0
ENV TF_CUDNN_VERSION=7.0
ENV TF_NCCL_VERSION=2.2
 
################ INTEL MKL SUPPORT #################

ENV LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
RUN cd /usr/local/lib && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libiomp5.so -o libiomp5.so && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libmklml_gnu.so -o libmklml_gnu.so && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libmklml_intel.so -o libmklml_intel.so
    
####################################################
