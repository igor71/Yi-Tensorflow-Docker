FROM nvidia/cuda:10.0-devel-ubuntu18.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ENV CUDNN_VERSION=7.6.4.38-1+cuda10.0
ARG TF_BRANCH=r1.15.0


#################################################
#          Set Time Zone Asia/Jerusalem         #
#################################################

ENV TZ=Asia/Jerusalem
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone


#################################################
#     Python 3.6 installations for dev          #
#################################################

ENV PYTHON_VERSION=3.6.8
# If this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.3.1
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK, fixing...
# http://bugs.python.org/issue19846
ENV LANG C.UTF-8

# Ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# Extra dependencies & python installation
RUN apt-get update && apt-get install -y --no-install-recommends \
        wget \
	tk-dev \
	libpq-dev \
	libssl-dev \
	openssl \
	libffi-dev \
	zlib1g-dev \
	libsqlite3-dev \
	&& rm -rf /var/lib/apt/lists/*

ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D

RUN set -ex \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --batch --keyserver hkp://keyserver.ubuntu.com --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	&& make -j "$(nproc)" \
	&& make install \
	&& ldconfig \
	\
	&& find /usr/local -depth \
		\( \
		\( -type d -a \( -name test -o -name tests \) \) \
		-o \
		\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
	\
	&& python3 --version

# Make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
        && ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s /usr/local/bin/python3.6 /usr/bin/python3.6.8 \
	&& ln -s python3-config python-config
	
##################################	
# Installing PIP and Dependences #
##################################	

RUN set -ex; \
	\
	wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
		\( -type d -a \( -name test -o -name tests \) \) \
		-o \
		\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py 


# Python 3.6 Will be used as default version

ARG python=3.6
ENV PYTHON_VERSION=${python}


# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

RUN apt-get update && DEBIAN_FRONTEND=noninteractive && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cmake \
        g++-4.8 \
        git \
        curl \
        vim \
        nano \
        mlocate \
        pv \
        ca-certificates \
	libsm6 \
	libxext6 \
	libxrender-dev \
        libcudnn7=${CUDNN_VERSION} \
        libjpeg-dev \
        libpng-dev \
        librdmacm1 \
        libibverbs1 \
        ibverbs-providers


############################################	
#      Installing build environment app    #
############################################
	
RUN python -m pip --no-cache-dir install \
    opencv-python \
    sklearn \
    albumentations \
    easydict \
    texttable \
    tflearn \
    keras \
    h5py


###################################
# Install TensorFlow GPU version. #
###################################

RUN cd /
ARG FTP_PATH
ARG FILE_NAME
RUN curl -OSL ${FTP_PATH} -o ${FILE_NAME} && \
    pip --no-cache-dir install --upgrade ${FILE_NAME} && \
    rm -f ${FILE_NAME}
	

###################################
#        Install Open MPI.        #
###################################

RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
    tar zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi
	

#################################################	
# Install Horovod, temporarily using CUDA stubs #
#################################################

RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    cd /tmp && \
    git clone --recursive https://github.com/uber/horovod.git && \
    cd horovod && \
    python setup.py clean && \
    python setup.py bdist_wheel && \
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITHOUT_MXNET=1 pip install --no-cache-dir dist/horovod*.whl && \
    ldconfig && \
    cd .. && \
    rm -rf horovod
	
	
#############################################################
# Install OpenSSH for MPI to communicate between containers #
#############################################################

RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
    mkdir -p /var/run/sshd
    
    
#######################################################################
# Allow OpenSSH to talk to containers without asking for confirmation #
#######################################################################

RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config
    
    
####################################
# Allow SSH login without password #
####################################    

RUN cd /root && \
    curl -OSL ftp://jenkins-cloud/pub/Tflow-VNC-Soft/Horovod/ssh-horovod.tar && \
    pv -f ssh-horovod.tar | tar xpf - -C $PWD && \
    rm -f ssh-horovod.tar
    
    
#####################
# Download examples #
#####################

RUN apt-get install -y --no-install-recommends subversion && \
    svn checkout https://github.com/horovod/horovod/trunk/examples && \
    rm -rf /examples/.svn && \
    apt-get -q clean -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -f /var/cache/apt/*.bin
    
    
#########################################
# Add Welcome Message With Instructions #
#########################################

RUN printf '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; printf "\
||||||||||||||||||||||||||||||||||||\n\
|                                  |\n\
| Docker Image Running Ubuntu 16   |\n\
| With TensorFlow ${TF_BRANCH} and |\n\
| Build from The Sources Horovod   |\n\
|                                  |\n\
||||||||||||||||||||||||||||||||||||\n\
\n "\
        > /etc/motd


WORKDIR "/examples"
